@page
@using Microsoft.AspNetCore.Authorization;
@model WebApplication_BusTimeline.Pages.Routes.AddShapeModel
@attribute [Authorize(Roles = "Admin")]
@{
}

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>



<div style="float: left; width: 70%">
		<div id="map" style="height: 500px;"></div>
</div>

<div style="float: right; width:25%" class="flex-column">
	<h4>Dodate tacke u rutu</h4>
	<table class="table">
		<thead class="table-primary">
			<tr>
				<td>Id</td>
				<td>Redni broj</td>
				<td>Latitude</td>			
				<td>Longitude</td>
				<td></td>
			</tr>
		</thead>
		<tbody class="table-secondary">
		@if(Model.Shapes != null)
		{
				
			
			@foreach(var s in Model.Shapes)
			{
				<tr>
					<td>@s.Id</td>
					<td>@s.RBr</td>
					<td>@s.Lat</td>
					<td>@s.Lon</td>
					<td>
						<form method="post" asp-page-handler="DeleteShape" asp-route-shapeId="@s.Id">
							<button class="btn btn-primary" style="background-color:white; width:40px; height:40px; display: flex; align-items: center; justify-content: center;">
								<svg width="40px" height="40px" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg" fill="#000000"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"><path fill="#000000" d="M352 192V95.936a32 32 0 0 1 32-32h256a32 32 0 0 1 32 32V192h256a32 32 0 1 1 0 64H96a32 32 0 0 1 0-64h256zm64 0h192v-64H416v64zM192 960a32 32 0 0 1-32-32V256h704v672a32 32 0 0 1-32 32H192zm224-192a32 32 0 0 0 32-32V416a32 32 0 0 0-64 0v320a32 32 0 0 0 32 32zm192 0a32 32 0 0 0 32-32V416a32 32 0 0 0-64 0v320a32 32 0 0 0 32 32z"></path></g></svg>
							</button>
						</form>
					</td>

				</tr>
				
			}
		}
		</tbody>
	</table>
		
		<div style="position:absolute; bottom : 0; left:0;">
			<a href="../Index">Home</a>
		</div>
</div>
		
	

	<script>
		RouteId = @Model.RouteId;

		console.log("Start map");

		var map = L.map('map').setView([44.968190, 19.608141], 16);
		L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
			maxZoom: 19,
		}).addTo(map);


		var coordinates = [];
		var marker = null;


		function onMapClick(e) {

		if (marker != null) {
			map.removeLayer(marker);
		}
			console.log(e.latlng.lat);
			console.log(e.latlng.lng);


			marker = L.marker([e.latlng.lat, e.latlng.lng]).addTo(map)
			//coordinates.push({ lat: e.latlng.lat, lon: e.latlng.lng });

			console.log(coordinates);

		post('https://localhost:7292/Routes/AddShape/', { id: RouteId, lat: e.latlng.lat, lon: e.latlng.lng });

		}

	@if (Model.Shapes != null)
		{
			@for (int i = 0; i < Model.Shapes?.Count(); i++)
			{
				@:coordinates.push({ lat: "@Model.Shapes[i].Lat.ToString().Replace(',','.')", lon: "@Model.Shapes[i].Lon.ToString().Replace(',','.')" });
			}
		}




	L.polyline(
		coordinates,
		{
			color: 'red',
			weight: 3,
			opacity: 0.5,
			smoothFactor: 1,
		}).addTo(map);

		map.on('click', onMapClick);

	function post(path, params, method = 'get') {

		// The rest of this code assumes you are not using a library.
		// It can be made less verbose if you use one.
		const form = document.createElement('form');
		form.method = method;
		form.action = path;

		for (const key in params) {
			if (params.hasOwnProperty(key)) {
				const hiddenField = document.createElement('input');
				hiddenField.type = 'hidden';
				hiddenField.name = key;
				hiddenField.value = params[key];

				form.appendChild(hiddenField);
			}
		}

		document.body.appendChild(form);
		form.submit();
	}

	</script>
@* 	
	// @if (Model.Shapes != null)
	// {
	// 	@for (int i = 0; i < Model.Shapes?.Count(); i++)
	// 	{
	// 		@:coordinates.push({ lat: "@Model.Shapes[i].Lat.ToString().Replace(',','.')", lon: "@Model.Shapes[i].Lon.ToString().Replace(',','.')" });
	// 	}
	// }

	// 	i=0;
	// while (i < coordinates.length) {
	// 	console.log(coordinates[i]);
	// 	i++;
	// }


	// var coordinates = [];

	//DrawPolyline = [];
 *@



@* 
	// @foreach (var s in Model.RouteWithStops.Stops)
	// {
	// 	@:marker = L.marker([s.lat, s.lon]);
	// } *@
