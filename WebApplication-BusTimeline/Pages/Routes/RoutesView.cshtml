@page
@model MapModel
@{
}
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Leaflet Routing Example</title>
	<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
	<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
	<script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.js"></script>
	<script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
	<link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />




	<style>
		body {
			margin: 0;
			padding: 0;
			font-family: Arial, sans-serif;
		}

		.container {
			width: 100%;
			max-width: 1200px;
			margin: 0 auto;
			padding: 5px;
			box-sizing: border-box;
		}

	</style>
	<title>Responsive Design Example</title>
</head>



<div class="mb-3" >
	<form method="get" action="/Routes/RoutesView">
		<label for="routeSelector">Prikaži liniju:</label>
		<select id="routeSelector" name="routeId" onchange="this.form.submit()">
			<option value="" disabled selected>Izaberite rutu</option>
			if(Model.Routes? != null){
					@foreach (var s in Model?.Routes)
					{
						<option value="@s.Id"> @s.Name</option>
					}
				}
		</select>
		<br />
	</form>
</div>

@if (Model.ErrorMessage != null)
{
	<div class="alert alert-danger" role="alert" style="margin-right: 625px;">
		<h7>@Model.ErrorMessage</h7>
	</div>

}

@if (Model.RouteId != null && string.IsNullOrEmpty(Model.ErrorMessage))
{
	<div><h7> Trenutno prikazana ruta je: @Model.RouteWithStop.Name </h7></div>
}

<div id="map" style="height: 600px;"></div>


<script>
	var map = L.map('map').setView([44.977300, 19.611058], 15);

	L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
		maxZoom: 19,
	}).addTo(map);

	function centerMapToMarker() {
		var markerLatLng = marker.getLatLng();
		map.setView(markerLatLng, 16);
	}

	var coordinates = [];
	var markers = [];
	var circles = [];

	@if(Model.Crossroads != null)
	{
		for(int i=0; i<Model.Crossroads?.Count(); i++)
		{
			@:circles.push({ lat: "@Model.Crossroads[i].Lat.ToString().Replace(',','.')", lon: "@Model.Crossroads[i].Lon.ToString().Replace(',','.')" });
		}

	}

	@if(Model.RouteWithStop != null)
	{
		@for(int i=0; i<Model.RouteWithStop?.Stops.Count(); i++)
		{
			@:markers.push({ lat: "@Model.RouteWithStop.Stops[i].Stop.Lat.ToString().Replace(',','.')", lon: "@Model.RouteWithStop.Stops[i].Stop.Lon.ToString().Replace(',','.')" });
		}
	}

	@if (Model.Shapes != null)
	{
		@for (int i = 0; i < Model.Shapes?.Count(); i++)
		{
			@:coordinates.push({ lat: "@Model.Shapes[i].Lat.ToString().Replace(',','.')", lon: "@Model.Shapes[i].Lon.ToString().Replace(',','.')" });

		}
	}


	for (var i = 0; i < markers.length; i++) {
	var marker = L.marker([markers[i].lat, markers[i].lon]).addTo(map);
	}

	var control = L.Routing.control({
		waypoints: [
			L.latLng(44.977300, 19.611058),  // Start point
			L.latLng(45.000000, 19.800000)   // End point
		],
		routeWhileDragging: true,
		geocoder: L.Control.Geocoder.nominatim(),
	}).addTo(map);

	// Disable dragging for each waypoint marker
	control.on('waypointschanged', function () {
		control.getWaypoints().forEach(function (waypoint) {
			waypoint.marker.dragging.disable();
		});
	});

	// var busRoute = L.polyline(
	// 	[coordinates],
	// 	{
	// 		color: 'red',
	// 		weight: 3,
	// 		opacity: 0.5,
	// 		smoothFactor: 1,
	// 	}).addTo(map);

	for (var i = 0; i < circles.length; i++) {
		var randomOpacity = Math.random();
		var circle = L.circle([circles[i].lat, circles[i].lon], {
			color: 'red',
			fillColor: '#f03',
			fillOpacity: randomOpacity,
			radius: 65
		}).addTo(map);

	}
	


</script>

<a href="../Index">Home</a>